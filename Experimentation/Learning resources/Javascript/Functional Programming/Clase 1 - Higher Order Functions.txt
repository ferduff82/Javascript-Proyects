
Higher order Functions:

Link: https://www.youtube.com/watch?v=BMUiFMZr7vk&list=PL0zVEGEvSaeEd9hlmCXrk5yUyqUag-n84

Higher order functions means that functions are values and
in functional programming functions are values:

Every time you pass an anonymous function or a callback, youâ€™re actually taking the value that the passed function returns, and using that as an argument for another function.

Las functions pueden ser aplicadas a variables y pasadas a otras functions por eso se llaman higher order functions.

Ej:

var triple = function (x) {
   return x * 3
}

var waffle = triple;

waffle(30);

Composition: Put big functions into smaller functions

Filter por ejemplo es un tipo de compose por que se realiza logica de funciones dentro de otras funciones

Ej:


var animals = [
    { name: 'fjlsf', species: 'rabbit'},
    { name: 'fjlsf', species: 'dog'},
    { name: 'fjlsf', species: 'dog'},
    { name: 'fjlsf', species: 'rabbit'},
    { name: 'fjlsf', species: 'rabbit'},
    { name: 'fjlsf', species: 'rabbit'},
]

The old way:

var dogs = [];
for (var i = 0; i < animals.lenght; i++) {
 if (animals[i].species === 'dog')
   dogs.push(animals[i])
}


The new way:

var IsDog = function(animal) {
    return animal.species === 'dogs'
}

var dogs = animals.filter(isDog);
var otherAnimals = animals.reject(isDog); // Reject only exists in Underscore

