// Copyright 2013 Google Inc. All Rights Reserved.package {  import com.google.ads.studio.HtmlEnabler;  import com.google.ads.studio.innovation.channelconnect.proxy.ChannelConnect;  import com.google.ads.studio.innovation.qrcode.proxy.QrCode;  import fl.controls.Button;  import fl.controls.TextArea;  import flash.display.Sprite;  import flash.events.Event;  import flash.events.MouseEvent;  import flash.external.ExternalInterface;  import flash.net.URLLoader;  import flash.net.URLRequest;  import flash.text.TextField;  import flash.text.TextFieldAutoSize;  /**   * Example build using ChannelConnect API.   *   * @author stocco@google.com (Roberto Stocco)   */  public class ChannelConnectExample extends Sprite {    private const LABEL_OPEN_CONNECTION:String = "Open Connection";    private const LABEL_CLOSE_CONNECTION:String = "Close Connection";    // <code>data</code> property of the message object dispatched by the    // connected companion when ready for the communication.    private const MOBILE_CLIENT_READY:String = "mobile_client_ready";    // <code>data</code> property of the message object dispatched by the    // connected companion when unloaded.    private const MOBILE_CLIENT_UNLOAD:String = "mobile_client_unload";    private var enabler:HtmlEnabler;    private var qrCode:QrCode;    private var channelConnect:ChannelConnect;    private var textOutputConsole:TextArea;    private var buttonOpen:Button;    private var buttonConnection:Button;    private var buttonSend:Button;    private var labelNote:TextField;    private var labelLink:TextField;    // This is the absolute URL to the mobile client. Update with client's html    // page url.    private var mobileClientUrl:String =        "http://motifcdn.doubleclick.net/strat/components/channelconnect/" +        "demo/mobile/mobile_client.html";    // This is the secret key provided you by DoubleClick team. Please reach out    // to your point of contact in DoubleClick to get one. By using the default    // zero-length string value, the component will connect to the development    // service with limited daily connection quotas.    private var secretKey:String = "";    public function ChannelConnectExample() {      enabler = HtmlEnabler.getInstance();      enabler.init(this);      // It is possible to overwrite the mobile client url using a parameter      // passed through DFA. This can be useful in case of live issues on the      // mobile side.      if (enabler.getParameter("mobileClientUrl")) {        mobileClientUrl = enabler.getParameter("mobileClientUrl");      }      buttonSend = createButton("Send Message", 10, 10, 100);      buttonOpen = createButton("Open Mobile Client", 140, 10, 120);      buttonConnection = createButton(LABEL_OPEN_CONNECTION, 270, 10, 120);      labelLink = new TextField();      labelLink.x = 10;      labelLink.y = 50;      labelLink.autoSize = TextFieldAutoSize.LEFT;      addChild(labelLink);      labelNote = new TextField();      labelNote.multiline = true;      labelNote.wordWrap = true;      labelNote.x = 810;      labelNote.y = 10;      labelNote.width = 150;      labelNote.height = 30;      labelNote.text = "Use your smartphone to open the QR code above.";      addChild(labelNote);      textOutputConsole = new TextArea();      textOutputConsole.x = 10;      textOutputConsole.y = 80;      textOutputConsole.width = 790;      textOutputConsole.height = 160;      addChild(textOutputConsole);      // Just show a place holder before the QRCode is loaded.      var sp:Sprite = new Sprite()      sp.graphics.beginFill(0xcccccc, .5);      sp.graphics.drawRect(0,0, 150, 150);      sp.graphics.endFill();      sp.x = 810;      sp.y = 50;      addChild(sp);      channelConnect = ChannelConnect.getInstance();      channelConnect.addEventListener("channelClose", channelCloseHandler);      channelConnect.addEventListener("channelOpen", channelOpenHandler);      channelConnect.addEventListener("channelError", channelErrorHandler);      channelConnect.addEventListener("channelMessage", channelMessageHandler);      channelConnect.addEventListener("channelReady", channelReadyHandler);      channelConnect.addEventListener("channelLoad", channelLoadHandler);    }    private function createButton(buttonLabel:String,                                  buttonX:Number,                                  buttonY:Number,                                  buttonWidth:Number):Button {      var button:Button = new Button();      button.label = buttonLabel;      button.x = buttonX;      button.y = buttonY;      button.width = 120;      button.enabled = false;      button.addEventListener(MouseEvent.CLICK, clickHandler);      return Button(addChild(button));    }    /**     * Loads a QR code with link to mobile client page.     *     * @param url Url to encode in the QR code tag.     */    private function loadQRCode(url:String):void {      qrCode = new QrCode();      addChild(qrCode);      qrCode.proxy.dataToEncode = url;      qrCode.proxy.sizeInPixels = 150;      qrCode.proxy.margin = 4;      qrCode.proxy.errorCorrectionLevel = "H";      qrCode.x = 810;      qrCode.y = 50;      qrCode.proxy.fetchQrCode();    }    private function clickHandler(event:MouseEvent):void {      switch (event.target) {        case buttonSend:          channelConnect.proxy.sendMessage({message: "Google Rocks!!!",              name: "DoubleClick"});          break;        case buttonOpen:        // Simulates companion connection by opening the html mobile client        // in a browser popup window.        var windowUrl:String = mobileClientUrl + "?id=" +                               channelConnect.proxy.getSessionId()        var windowName:String = "mobile_client";        var windowSpecs:String = "location=1,status=1,menubar=1," +                                 "resizable=1,width=370,height=250";        ExternalInterface.call("window.open", windowUrl, windowName,            windowSpecs);          break;        case buttonConnection:          if (buttonConnection.label == LABEL_CLOSE_CONNECTION) {            channelConnect.proxy.closeChannel();          } else if (buttonConnection.label == LABEL_OPEN_CONNECTION) {            channelConnect.proxy.requestChannels(secretKey);            buttonConnection.enabled = false;          }          break;      }    }    // Called when the connection is closed.    private function channelCloseHandler(event:Object):void {      textOutputConsole.appendText("channelCloseHandler\n");      buttonSend.enabled = false;      buttonOpen.enabled = false      buttonConnection.label = LABEL_OPEN_CONNECTION;    }    // Called when the component has loaded all its internal assets and is    // ready to request a connection.    private function channelLoadHandler(event:Object):void {      textOutputConsole.appendText("channelLoadHandler. You can now call " +          "the \"requestChannels\" method. \n");      buttonConnection.enabled = true;    }    // Called when the connection has been initialized and the component is    // ready to open the communication with the service.    private function channelReadyHandler(event:Object):void {      textOutputConsole.appendText("channelReadyHandler\n");      buttonConnection.enabled = true;      buttonConnection.label = LABEL_CLOSE_CONNECTION;      channelConnect.proxy.connectToChannel();    }    // Called when the connection has been opened and the component is ready to    // send / receive messages.    private function channelOpenHandler(event:Object):void {      textOutputConsole.appendText("channelOpenHandler\n");      buttonOpen.enabled = true;      // Shorten mobile client url.      var urlToShorten:String = mobileClientUrl + "?id=" +        channelConnect.proxy.getSessionId();      var serviceUrl:String = "https://dcrmstrat-channelconnect.appspot.com/" +          "shorten/?url=" + escape(urlToShorten) + "&id=" +        channelConnect.proxy.getSessionId();      var urlLoader:URLLoader = new URLLoader(new URLRequest(serviceUrl));      urlLoader.addEventListener(Event.COMPLETE, shortenCompleteHandler);      labelLink.text = urlToShorten + " (shortening...)";    }    // Called when a message is received.    private function channelMessageHandler(event:Object):void {      textOutputConsole.appendText("channelMessageHandler: " +          event.data.data + "\n");      switch (event.data.data) {        case MOBILE_CLIENT_READY:          buttonSend.enabled = true;          break        case MOBILE_CLIENT_UNLOAD:          buttonSend.enabled = false;          break;      }    }    // Called when a connection error occours.    private function channelErrorHandler(event:Object):void {      textOutputConsole.appendText("Channel Error: " + event.code + " - " +          event.description + "\n");    }    private function shortenCompleteHandler(event:Event):void {      // This might not work in same edge case in Win/IE8.      /*      var url:String = ExternalInterface.call(          "function(jsonString){return (JSON.parse(jsonString)).id;}",          event.target.data);      */      // Safer JSON parsing, using no native JSON parser.      var scriptSrc:String = (<![CDATA[        (function(jsonString) {          var obj = eval('(' + jsonString + ')');          return obj.id;        })('@json_string@');      ]]>).toString();      scriptSrc = scriptSrc.replace(/@json_string@/g,                                    event.target.data as String);      var url:String = ExternalInterface.call("eval", scriptSrc);      loadQRCode(url);      // Display html mobile client url for information.      labelLink.text = url;    }  }}